
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.UIManager;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author bulba
 */

    class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Comma-Separated Values (*.csv)";
        }
    } 

        
            class MyPropertyFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".properties");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Properties File (*.properties)";
        }
    } 
public class Dataloader extends javax.swing.JFrame {
    /**
     * Creates new form NewJFrame
     */
    
    public Dataloader() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        Entity = new javax.swing.ButtonGroup();
        propertyPicker = new javax.swing.JFileChooser();
        properties = new javax.swing.JDialog();
        cancelProperties1 = new javax.swing.JButton();
        applyProperties1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        clientID = new javax.swing.JTextField();
        clientSecret = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        authUrl = new javax.swing.JCheckBox();
        dateFormat = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        delimiter = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        resetProperties1 = new javax.swing.JButton();
        threads = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        placementExist = new javax.swing.JTextField();
        leadExist = new javax.swing.JTextField();
        clientContactExist = new javax.swing.JTextField();
        candidateExist = new javax.swing.JTextField();
        opportunityExist = new javax.swing.JTextField();
        jobOrderExist = new javax.swing.JTextField();
        clientCompanyExist = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        fileLocation = new javax.swing.JTextField();
        openPicker = new javax.swing.JButton();
        candidateRadio = new javax.swing.JRadioButton();
        clientContactRadio = new javax.swing.JRadioButton();
        clientCorporationRadio = new javax.swing.JRadioButton();
        leadRadio = new javax.swing.JRadioButton();
        opportunityRadio = new javax.swing.JRadioButton();
        placementRadio = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayPane = new javax.swing.JTextArea();
        generateButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Properties = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Choose a file");
        fileChooser.setFileFilter(new MyCustomFilter());
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        propertyPicker.setApproveButtonToolTipText("");
        propertyPicker.setFileFilter(new MyPropertyFilter());

        properties.setTitle("Dataloader Properties");
        properties.setAlwaysOnTop(true);
        properties.setMaximumSize(new java.awt.Dimension(32188923, 32103));
        properties.setMinimumSize(new java.awt.Dimension(320, 550));
        properties.setSize(new java.awt.Dimension(295, 450));

        cancelProperties1.setText("Cancel");
        cancelProperties1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelProperties1ActionPerformed(evt);
            }
        });

        applyProperties1.setText("Apply");
        applyProperties1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyProperties1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Properties");

        clientID.setText("Insert Client ID");
        clientID.setToolTipText("Enter Client ID");
        clientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientIDActionPerformed(evt);
            }
        });

        clientSecret.setText("Insert Client Secret");
        clientSecret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientSecretActionPerformed(evt);
            }
        });

        username.setText("Insert username");

        password.setText("Insert Password");

        authUrl.setText("Use auth9 URLS?");
        authUrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authUrlActionPerformed(evt);
            }
        });

        dateFormat.setText("MM/dd/yy HH:mm");
        dateFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFormatActionPerformed(evt);
            }
        });

        jLabel8.setText("Date Format");

        delimiter.setText(";");
        delimiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delimiterActionPerformed(evt);
            }
        });

        jLabel9.setText("List Delimiter");

        resetProperties1.setText("Reset");
        resetProperties1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetProperties1ActionPerformed(evt);
            }
        });

        threads.setText("0");
        threads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threadsActionPerformed(evt);
            }
        });

        jLabel10.setText("Number of Threads");

        candidateExist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                candidateExistActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Exist Fields");

        jCheckBox1.setText("Candidate");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Contact");

        jCheckBox3.setText("Company");

        jCheckBox4.setText("Job");

        jCheckBox5.setText("Lead");

        jCheckBox6.setText("Opportunity");

        jCheckBox7.setText("Placement");

        javax.swing.GroupLayout propertiesLayout = new javax.swing.GroupLayout(properties.getContentPane());
        properties.getContentPane().setLayout(propertiesLayout);
        propertiesLayout.setHorizontalGroup(
            propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propertiesLayout.createSequentialGroup()
                        .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(opportunityExist, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(leadExist)
                            .addComponent(jobOrderExist)
                            .addComponent(clientCompanyExist)
                            .addComponent(placementExist, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clientContactExist, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(candidateExist, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(propertiesLayout.createSequentialGroup()
                        .addComponent(authUrl)
                        .addGap(6, 6, 6)
                        .addComponent(threads, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(propertiesLayout.createSequentialGroup()
                        .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(clientSecret, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(username, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(password, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(clientID, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, propertiesLayout.createSequentialGroup()
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(propertiesLayout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, propertiesLayout.createSequentialGroup()
                                    .addComponent(resetProperties1)
                                    .addGap(44, 44, 44)
                                    .addComponent(cancelProperties1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(applyProperties1))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        propertiesLayout.setVerticalGroup(
            propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(clientSecret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authUrl)
                    .addComponent(jLabel10)
                    .addComponent(threads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(candidateExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientContactExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addGap(1, 1, 1)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientCompanyExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobOrderExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leadExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(opportunityExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(placementExist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetProperties1)
                    .addComponent(cancelProperties1)
                    .addComponent(applyProperties1))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dataloader");

        fileLocation.setText("...");
        fileLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileLocationActionPerformed(evt);
            }
        });

        openPicker.setText("Choose File");
        openPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPickerActionPerformed(evt);
            }
        });

        Entity.add(candidateRadio);
        candidateRadio.setText("Candidate");
        candidateRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                candidateRadioActionPerformed(evt);
            }
        });

        Entity.add(clientContactRadio);
        clientContactRadio.setText("ClientContact");

        Entity.add(clientCorporationRadio);
        clientCorporationRadio.setText("ClientCorporation");

        Entity.add(leadRadio);
        leadRadio.setText("Lead");
        leadRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leadRadioActionPerformed(evt);
            }
        });

        Entity.add(opportunityRadio);
        opportunityRadio.setText("Opportunity");

        Entity.add(placementRadio);
        placementRadio.setText("Placement");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Select Entity");
        jLabel1.setToolTipText("");

        displayPane.setColumns(20);
        displayPane.setRows(5);
        jScrollPane1.setViewportView(displayPane);

        generateButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        generateButton.setText("Generate CSV");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        loadButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        loadButton.setText("Load CSV");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        Edit.setText("Edit");

        Properties.setText("Properties");
        Properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PropertiesActionPerformed(evt);
            }
        });
        Edit.add(Properties);

        jMenuBar1.add(Edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(opportunityRadio)
                            .addComponent(leadRadio)
                            .addComponent(clientContactRadio)
                            .addComponent(candidateRadio)
                            .addComponent(clientCorporationRadio)
                            .addComponent(placementRadio)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(35, 35, 35)
                            .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(fileLocation)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(openPicker))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openPicker))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addComponent(candidateRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientContactRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientCorporationRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leadRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opportunityRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placementRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed

    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void openPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPickerActionPerformed
                int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            fileLocation.setText(file.getAbsolutePath());
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_openPickerActionPerformed

    private void fileLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileLocationActionPerformed

    private void candidateRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_candidateRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_candidateRadioActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void leadRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leadRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leadRadioActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        
        String selectedEntity;
        try {
            if(candidateRadio.isSelected()){
                selectedEntity = "Candidate";
            } else if(clientContactRadio.isSelected()){
                selectedEntity = "ClientContact";
            } else if(clientCorporationRadio.isSelected()){
                selectedEntity = "ClientCorporation";
            } else if(leadRadio.isSelected()){
                selectedEntity = "Lead";
            } else if(opportunityRadio.isSelected()){
                selectedEntity = "Opportunity";
            } else if(placementRadio.isSelected()){
                selectedEntity = "Placement";
            } else{
                selectedEntity = "select an entity";
            }
            String generateCommand;
            generateCommand = "dataloader template " + selectedEntity;
            
            System.out.println(generateCommand);
            ProcessBuilder builder = new ProcessBuilder(
                    "cmd.exe", "/c", generateCommand);
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while (true) {
                line = r.readLine();
                if (line == null) { break; }
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        /*try {
            // TODO add your handling code here:
            String file;
            file = "cd \"" + fileLocation.getText() + "\" && dir";
            
            System.out.println(file);
            ProcessBuilder builder = new ProcessBuilder(
                    "cmd.exe", "/c", file);
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while (true) {
                line = r.readLine();
                if (line == null) { break; }
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        }*/

        try {
            // TODO add your handling code here:
            String loadCommand;
            loadCommand = "dataloader load" + fileLocation.getText();
            
            System.out.println(loadCommand);
            ProcessBuilder builder = new ProcessBuilder(
                    "cmd.exe", "/c", loadCommand);
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while (true) {
                line = r.readLine();
                if (line == null) { break; }
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            // TODO add your handling code here:
            String deleteCommand;
            deleteCommand = "dataloader delete" + fileLocation.getText();
            
            System.out.println(deleteCommand);
            ProcessBuilder builder = new ProcessBuilder(
                    "cmd.exe", "/c", deleteCommand);
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while (true) {
                line = r.readLine();
                if (line == null) { break; }
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void PropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PropertiesActionPerformed
        FileReader reader = null; 
        try {
            properties.setVisible(true);
            Properties prop = new Properties();
            reader = new FileReader("dataloader.properties");
            prop.load(reader);
            clientID.setText(prop.getProperty("clientId"));// = prop.getProperty("username");
            clientSecret.setText(prop.getProperty("clientSecret"));
            username.setText(prop.getProperty("username"));
            password.setText(prop.getProperty("password"));
            dateFormat.setText(prop.getProperty("dateFormat"));
            delimiter.setText(prop.getProperty("listDelimiter"));
            threads.setText(prop.getProperty("numThreads"));
            
            candidateExist.setText(prop.getProperty("candidateExistField"));
            clientContactExist.setText(prop.getProperty("clientContactExistField"));
            clientCompanyExist.setText(prop.getProperty("clientCorporationExistField"));
            jobOrderExist.setText(prop.getProperty("jobOrderExistField"));
            leadExist.setText(prop.getProperty("leadExistField"));
            opportunityExist.setText(prop.getProperty("opportunityExistField"));
            placementExist.setText(prop.getProperty("placementExistField"));
            
            
            if ("https://auth9.bullhornstaffing.com/oauth/token".equals(prop.getProperty("tokenUrl")))
            {
                authUrl.setSelected(true);
            }
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_PropertiesActionPerformed

    private void candidateExistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_candidateExistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_candidateExistActionPerformed

    private void threadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threadsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_threadsActionPerformed

    private void resetProperties1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetProperties1ActionPerformed
        FileChannel source = null;
        FileChannel destination = null;

        try {
            source = new FileInputStream("defaultProperties.properties").getChannel();
            destination = new FileOutputStream("dataloader.properties").getChannel();
            destination.transferFrom(source, 0, source.size());
            properties.setVisible(false);
        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        }                finally {
            if(source != null) {
                try {
                    source.close();
                } catch (IOException ex) {
                    Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(destination != null) {
                try {
                    destination.close();
                } catch (IOException ex) {
                    Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_resetProperties1ActionPerformed

    private void delimiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delimiterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delimiterActionPerformed

    private void dateFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFormatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFormatActionPerformed

    private void authUrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authUrlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authUrlActionPerformed

    private void clientSecretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientSecretActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientSecretActionPerformed

    private void clientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientIDActionPerformed

    private void applyProperties1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyProperties1ActionPerformed

        FileInputStream in = null;
        try {
            in = new FileInputStream("dataloader.properties");
            Properties props = new Properties();
            props.load(in);
            in.close();

            FileOutputStream out = new FileOutputStream("dataloader.properties");
            props.setProperty("username", username.getText());
            props.setProperty("password", password.getText());
            props.setProperty("clientId", clientID.getText());
            props.setProperty("clientSecret", clientSecret.getText());
            props.setProperty("listDelimiter", delimiter.getText());
            props.setProperty("dateFormat", dateFormat.getText());
            props.setProperty("numThreads", threads.getText());
            props.setProperty("candidateExistField", candidateExist.getText());
            props.setProperty("clientContactExistField", clientContactExist.getText());
            props.setProperty("clientCorporationExistField", clientCompanyExist.getText());
            props.setProperty("jobOrderExistField", jobOrderExist.getText());
            props.setProperty("leadExistField", leadExist.getText());
            props.setProperty("opportunityExistField", opportunityExist.getText());
            props.setProperty("placementExistField", placementExist.getText());

            if (authUrl.isSelected())
            {
                props.setProperty("authorizeUrl", "https://auth9.bullhornstaffing.com/oauth/authorize");
                props.setProperty("tokenURL", "https://auth9.bullhornstaffing.com/oauth/token");
                props.setProperty("loginUrl", "https://rest9.bullhornstaffing.com/rest-services/login");
            }
            else
            {
                props.setProperty("authorizeUrl", "https://auth.bullhornstaffing.com/oauth/authorize");
                props.setProperty("tokenURL", "https://auth.bullhornstaffing.com/oauth/token");
                props.setProperty("loginUrl", "https://rest.bullhornstaffing.com/rest-services/login");
            }

            props.store(out, null);
            out.close();
            properties.setVisible(false);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(Dataloader.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_applyProperties1ActionPerformed

    private void cancelProperties1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelProperties1ActionPerformed
        properties.setVisible(false);
    }//GEN-LAST:event_cancelProperties1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dataloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dataloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dataloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dataloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dataloader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Edit;
    private javax.swing.ButtonGroup Entity;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Properties;
    private javax.swing.JButton applyProperties1;
    private javax.swing.JCheckBox authUrl;
    private javax.swing.JButton cancelProperties1;
    private javax.swing.JTextField candidateExist;
    private javax.swing.JRadioButton candidateRadio;
    private javax.swing.JTextField clientCompanyExist;
    private javax.swing.JTextField clientContactExist;
    private javax.swing.JRadioButton clientContactRadio;
    private javax.swing.JRadioButton clientCorporationRadio;
    private javax.swing.JTextField clientID;
    private javax.swing.JTextField clientSecret;
    private javax.swing.JTextField dateFormat;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField delimiter;
    private javax.swing.JTextArea displayPane;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTextField fileLocation;
    private javax.swing.JButton generateButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jobOrderExist;
    private javax.swing.JTextField leadExist;
    private javax.swing.JRadioButton leadRadio;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton openPicker;
    private javax.swing.JTextField opportunityExist;
    private javax.swing.JRadioButton opportunityRadio;
    private javax.swing.JTextField password;
    private javax.swing.JTextField placementExist;
    private javax.swing.JRadioButton placementRadio;
    private javax.swing.JDialog properties;
    private javax.swing.JFileChooser propertyPicker;
    private javax.swing.JButton resetProperties1;
    private javax.swing.JTextField threads;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
